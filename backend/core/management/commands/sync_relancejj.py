import unicodedata
from django.core.management.base import BaseCommand
from django.utils import timezone
from core.models import GRDV, ARD2, RelanceJJ, Parametres


class Command(BaseCommand):
    help = (
        "Synchronise les donn√©es GRDV + ARD2 dans RelanceJJ pour la journ√©e actuelle.\n"
        "- Si une ligne existe avec m√™me jeton_commande + date_rdv => mise √† jour.\n"
        "- Sinon => cr√©ation.\n"
        "- Met ensuite √† jour le num√©ro technicien + soci√©t√© √† partir de Parametres."
    )

    def handle(self, *args, **kwargs):
        today = timezone.localdate()

        ard2_values = list(ARD2.objects.values_list('jeton_commande', flat=True))
        self.stdout.write(self.style.NOTICE(f"üîç ARD2 pr√©sents : {len(ard2_values)}"))
        self.stdout.write(self.style.NOTICE(f"Exemples : {ard2_values[:5]}"))

        count_created = 0
        count_updated = 0

        # üîÑ On ne traite que les GRDV dont la date_rdv est aujourd'hui
        grdv_qs = GRDV.objects.filter(date_rdv__date=today)

        self.stdout.write(self.style.NOTICE(f"üóìÔ∏è Nombre de GRDV √† la date {today} : {grdv_qs.count()}"))

        for grdv in grdv_qs:
            if not grdv.ref_commande:
                self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è GRDV {grdv.id} sans ref_commande. Ignor√©."))
                continue

            # Normalisation du jeton
            ref_norm = unicodedata.normalize("NFKC", grdv.ref_commande.strip())[:10]
            self.stdout.write(f"\nüîó GRDV {grdv.id} ‚Üí ref_commande normalis√© : {ref_norm}")

            ard2 = ARD2.objects.filter(jeton_commande__iexact=ref_norm).first()
            if not ard2:
                self.stdout.write(self.style.WARNING(f"‚ùå Aucun ARD2 trouv√© pour ref '{ref_norm}'"))
                continue

            date_rdv = grdv.date_rdv.date() if grdv.date_rdv else None

            # Synchronisation logique : on ne prend "NOK" comme r√©el que si d√©but ET fin sont pr√©sents
            etat_intervention = ard2.etat_intervention or ''
            if etat_intervention.upper() == "NOK":
                if not (ard2.debut_intervention and ard2.fin_intervention):
                    etat_intervention = ""  # On ignore les NOK fant√¥mes

            relance_data = {
                "grdv": grdv,
                "heure_debut": ard2.debut_intervention.time() if ard2.debut_intervention else None,
                "heure_fin": ard2.fin_intervention.time() if ard2.fin_intervention else None,
                "departement": ard2.departement or '',
                "techniciens": ard2.technicien or '',
                "synchro": etat_intervention,  # ‚¨ÖÔ∏è √©tat nettoy√© selon ta logique
            }

            relance_qs = RelanceJJ.objects.filter(
                jeton_commande=ard2.jeton_commande,
                date_rdv=date_rdv
            )

            if relance_qs.exists():
                relance = relance_qs.first()
                for key, val in relance_data.items():
                    setattr(relance, key, val)
                relance.save()
                count_updated += 1
                action = "üìù Mis √† jour"
            else:
                relance = RelanceJJ.objects.create(
                    jeton_commande=ard2.jeton_commande,
                    date_rdv=date_rdv,
                    **relance_data
                )
                count_created += 1
                action = "üÜï Cr√©√©"

            self.stdout.write(self.style.SUCCESS(f"{action} RelanceJJ pour GRDV {grdv.id}"))

            # Mise √† jour via Parametres
            param = Parametres.objects.filter(
                nom_tech__iexact=relance.techniciens,
                departement__iexact=relance.departement
            ).first()

            if param:
                changed = False
                if param.numero_technicien and relance.numero != param.numero_technicien:
                    relance.numero = param.numero_technicien
                    changed = True
                if param.societe and relance.societe != param.societe:
                    relance.societe = param.societe
                    changed = True

                if changed:
                    relance.save()
                    self.stdout.write(self.style.SUCCESS(
                        f"üîÑ Num√©ro/Soci√©t√© mis √† jour : {param.numero_technicien} / {param.societe}"
                    ))
            else:
                self.stdout.write(self.style.WARNING(
                    f"‚ö†Ô∏è Aucun Parametres pour '{relance.techniciens}' - {relance.departement}"
                ))

        self.stdout.write(self.style.SUCCESS(
            f"\n‚úÖ Synchronisation termin√©e : {count_created} cr√©√©s, {count_updated} mis √† jour."
        ))
